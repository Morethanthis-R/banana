// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: transfer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransferClient is the client API for Transfer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferClient interface {
	UploadEntry(ctx context.Context, in *ReqUpload, opts ...grpc.CallOption) (*RespUpload, error)
	DownLoadEntry(ctx context.Context, in *ReqDownload, opts ...grpc.CallOption) (*RespDownload, error)
	UploadStatic(ctx context.Context, in *ReqStatic, opts ...grpc.CallOption) (*RespStatic, error)
	GetUserFileTree(ctx context.Context, in *ReqGetUserFileTree, opts ...grpc.CallOption) (*RespGetUserFileTree, error)
	DeleteFile(ctx context.Context, in *ReqDeleteFile, opts ...grpc.CallOption) (*RespDelete, error)
	DeleteDir(ctx context.Context, in *ReqDeleteDir, opts ...grpc.CallOption) (*RespDelete, error)
	ShareFileStr(ctx context.Context, in *ReqShareFileStr, opts ...grpc.CallOption) (*RespShareFileStr, error)
	PreviewFile(ctx context.Context, in *ReqPreviewFile, opts ...grpc.CallOption) (*RespPreviewFile, error)
	FileCensus(ctx context.Context, in *ReqFileCensus, opts ...grpc.CallOption) (*RespFileCensus, error)
	SearchFile(ctx context.Context, in *ReqSearchFile, opts ...grpc.CallOption) (*RespSearchFile, error)
	GetUserTrashBin(ctx context.Context, in *ReqGetUserTrashBin, opts ...grpc.CallOption) (*RespGetUserTrashBin, error)
	CleanTrashFile(ctx context.Context, in *ReqCleanTrashFile, opts ...grpc.CallOption) (*RespCleanTrash, error)
	CleanTrashDir(ctx context.Context, in *ReqCleanTrashDir, opts ...grpc.CallOption) (*RespCleanTrash, error)
	WithDrawFile(ctx context.Context, in *ReqWithDrawFile, opts ...grpc.CallOption) (*RespWithDraw, error)
	WithDrawDir(ctx context.Context, in *ReqWithDrawDir, opts ...grpc.CallOption) (*RespWithDraw, error)
	CreateDir(ctx context.Context, in *ReqCreateDir, opts ...grpc.CallOption) (*RespCreateDir, error)
	GuestUpload(ctx context.Context, in *ReqGuestUpload, opts ...grpc.CallOption) (*RespGuestUpload, error)
	GetCodeDownload(ctx context.Context, in *ReqGetCodeDownLoad, opts ...grpc.CallOption) (*RespGetCOdeDownload, error)
}

type transferClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferClient(cc grpc.ClientConnInterface) TransferClient {
	return &transferClient{cc}
}

func (c *transferClient) UploadEntry(ctx context.Context, in *ReqUpload, opts ...grpc.CallOption) (*RespUpload, error) {
	out := new(RespUpload)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/UploadEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) DownLoadEntry(ctx context.Context, in *ReqDownload, opts ...grpc.CallOption) (*RespDownload, error) {
	out := new(RespDownload)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/DownLoadEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) UploadStatic(ctx context.Context, in *ReqStatic, opts ...grpc.CallOption) (*RespStatic, error) {
	out := new(RespStatic)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/UploadStatic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) GetUserFileTree(ctx context.Context, in *ReqGetUserFileTree, opts ...grpc.CallOption) (*RespGetUserFileTree, error) {
	out := new(RespGetUserFileTree)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/GetUserFileTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) DeleteFile(ctx context.Context, in *ReqDeleteFile, opts ...grpc.CallOption) (*RespDelete, error) {
	out := new(RespDelete)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) DeleteDir(ctx context.Context, in *ReqDeleteDir, opts ...grpc.CallOption) (*RespDelete, error) {
	out := new(RespDelete)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/DeleteDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) ShareFileStr(ctx context.Context, in *ReqShareFileStr, opts ...grpc.CallOption) (*RespShareFileStr, error) {
	out := new(RespShareFileStr)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/ShareFileStr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) PreviewFile(ctx context.Context, in *ReqPreviewFile, opts ...grpc.CallOption) (*RespPreviewFile, error) {
	out := new(RespPreviewFile)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/PreviewFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) FileCensus(ctx context.Context, in *ReqFileCensus, opts ...grpc.CallOption) (*RespFileCensus, error) {
	out := new(RespFileCensus)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/FileCensus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) SearchFile(ctx context.Context, in *ReqSearchFile, opts ...grpc.CallOption) (*RespSearchFile, error) {
	out := new(RespSearchFile)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/SearchFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) GetUserTrashBin(ctx context.Context, in *ReqGetUserTrashBin, opts ...grpc.CallOption) (*RespGetUserTrashBin, error) {
	out := new(RespGetUserTrashBin)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/GetUserTrashBin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) CleanTrashFile(ctx context.Context, in *ReqCleanTrashFile, opts ...grpc.CallOption) (*RespCleanTrash, error) {
	out := new(RespCleanTrash)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/CleanTrashFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) CleanTrashDir(ctx context.Context, in *ReqCleanTrashDir, opts ...grpc.CallOption) (*RespCleanTrash, error) {
	out := new(RespCleanTrash)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/CleanTrashDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) WithDrawFile(ctx context.Context, in *ReqWithDrawFile, opts ...grpc.CallOption) (*RespWithDraw, error) {
	out := new(RespWithDraw)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/WithDrawFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) WithDrawDir(ctx context.Context, in *ReqWithDrawDir, opts ...grpc.CallOption) (*RespWithDraw, error) {
	out := new(RespWithDraw)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/WithDrawDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) CreateDir(ctx context.Context, in *ReqCreateDir, opts ...grpc.CallOption) (*RespCreateDir, error) {
	out := new(RespCreateDir)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/CreateDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) GuestUpload(ctx context.Context, in *ReqGuestUpload, opts ...grpc.CallOption) (*RespGuestUpload, error) {
	out := new(RespGuestUpload)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/GuestUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferClient) GetCodeDownload(ctx context.Context, in *ReqGetCodeDownLoad, opts ...grpc.CallOption) (*RespGetCOdeDownload, error) {
	out := new(RespGetCOdeDownload)
	err := c.cc.Invoke(ctx, "/tf.service.v1.Transfer/GetCodeDownload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServer is the server API for Transfer service.
// All implementations must embed UnimplementedTransferServer
// for forward compatibility
type TransferServer interface {
	UploadEntry(context.Context, *ReqUpload) (*RespUpload, error)
	DownLoadEntry(context.Context, *ReqDownload) (*RespDownload, error)
	UploadStatic(context.Context, *ReqStatic) (*RespStatic, error)
	GetUserFileTree(context.Context, *ReqGetUserFileTree) (*RespGetUserFileTree, error)
	DeleteFile(context.Context, *ReqDeleteFile) (*RespDelete, error)
	DeleteDir(context.Context, *ReqDeleteDir) (*RespDelete, error)
	ShareFileStr(context.Context, *ReqShareFileStr) (*RespShareFileStr, error)
	PreviewFile(context.Context, *ReqPreviewFile) (*RespPreviewFile, error)
	FileCensus(context.Context, *ReqFileCensus) (*RespFileCensus, error)
	SearchFile(context.Context, *ReqSearchFile) (*RespSearchFile, error)
	GetUserTrashBin(context.Context, *ReqGetUserTrashBin) (*RespGetUserTrashBin, error)
	CleanTrashFile(context.Context, *ReqCleanTrashFile) (*RespCleanTrash, error)
	CleanTrashDir(context.Context, *ReqCleanTrashDir) (*RespCleanTrash, error)
	WithDrawFile(context.Context, *ReqWithDrawFile) (*RespWithDraw, error)
	WithDrawDir(context.Context, *ReqWithDrawDir) (*RespWithDraw, error)
	CreateDir(context.Context, *ReqCreateDir) (*RespCreateDir, error)
	GuestUpload(context.Context, *ReqGuestUpload) (*RespGuestUpload, error)
	GetCodeDownload(context.Context, *ReqGetCodeDownLoad) (*RespGetCOdeDownload, error)
	mustEmbedUnimplementedTransferServer()
}

// UnimplementedTransferServer must be embedded to have forward compatible implementations.
type UnimplementedTransferServer struct {
}

func (UnimplementedTransferServer) UploadEntry(context.Context, *ReqUpload) (*RespUpload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadEntry not implemented")
}
func (UnimplementedTransferServer) DownLoadEntry(context.Context, *ReqDownload) (*RespDownload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownLoadEntry not implemented")
}
func (UnimplementedTransferServer) UploadStatic(context.Context, *ReqStatic) (*RespStatic, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadStatic not implemented")
}
func (UnimplementedTransferServer) GetUserFileTree(context.Context, *ReqGetUserFileTree) (*RespGetUserFileTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFileTree not implemented")
}
func (UnimplementedTransferServer) DeleteFile(context.Context, *ReqDeleteFile) (*RespDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedTransferServer) DeleteDir(context.Context, *ReqDeleteDir) (*RespDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDir not implemented")
}
func (UnimplementedTransferServer) ShareFileStr(context.Context, *ReqShareFileStr) (*RespShareFileStr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShareFileStr not implemented")
}
func (UnimplementedTransferServer) PreviewFile(context.Context, *ReqPreviewFile) (*RespPreviewFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewFile not implemented")
}
func (UnimplementedTransferServer) FileCensus(context.Context, *ReqFileCensus) (*RespFileCensus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileCensus not implemented")
}
func (UnimplementedTransferServer) SearchFile(context.Context, *ReqSearchFile) (*RespSearchFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFile not implemented")
}
func (UnimplementedTransferServer) GetUserTrashBin(context.Context, *ReqGetUserTrashBin) (*RespGetUserTrashBin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserTrashBin not implemented")
}
func (UnimplementedTransferServer) CleanTrashFile(context.Context, *ReqCleanTrashFile) (*RespCleanTrash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanTrashFile not implemented")
}
func (UnimplementedTransferServer) CleanTrashDir(context.Context, *ReqCleanTrashDir) (*RespCleanTrash, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanTrashDir not implemented")
}
func (UnimplementedTransferServer) WithDrawFile(context.Context, *ReqWithDrawFile) (*RespWithDraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithDrawFile not implemented")
}
func (UnimplementedTransferServer) WithDrawDir(context.Context, *ReqWithDrawDir) (*RespWithDraw, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithDrawDir not implemented")
}
func (UnimplementedTransferServer) CreateDir(context.Context, *ReqCreateDir) (*RespCreateDir, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDir not implemented")
}
func (UnimplementedTransferServer) GuestUpload(context.Context, *ReqGuestUpload) (*RespGuestUpload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuestUpload not implemented")
}
func (UnimplementedTransferServer) GetCodeDownload(context.Context, *ReqGetCodeDownLoad) (*RespGetCOdeDownload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodeDownload not implemented")
}
func (UnimplementedTransferServer) mustEmbedUnimplementedTransferServer() {}

// UnsafeTransferServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServer will
// result in compilation errors.
type UnsafeTransferServer interface {
	mustEmbedUnimplementedTransferServer()
}

func RegisterTransferServer(s grpc.ServiceRegistrar, srv TransferServer) {
	s.RegisterService(&Transfer_ServiceDesc, srv)
}

func _Transfer_UploadEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).UploadEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/UploadEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).UploadEntry(ctx, req.(*ReqUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_DownLoadEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDownload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).DownLoadEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/DownLoadEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).DownLoadEntry(ctx, req.(*ReqDownload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_UploadStatic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStatic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).UploadStatic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/UploadStatic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).UploadStatic(ctx, req.(*ReqStatic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_GetUserFileTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserFileTree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).GetUserFileTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/GetUserFileTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).GetUserFileTree(ctx, req.(*ReqGetUserFileTree))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).DeleteFile(ctx, req.(*ReqDeleteFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_DeleteDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteDir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).DeleteDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/DeleteDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).DeleteDir(ctx, req.(*ReqDeleteDir))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_ShareFileStr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqShareFileStr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).ShareFileStr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/ShareFileStr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).ShareFileStr(ctx, req.(*ReqShareFileStr))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_PreviewFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqPreviewFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).PreviewFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/PreviewFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).PreviewFile(ctx, req.(*ReqPreviewFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_FileCensus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqFileCensus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).FileCensus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/FileCensus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).FileCensus(ctx, req.(*ReqFileCensus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_SearchFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSearchFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).SearchFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/SearchFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).SearchFile(ctx, req.(*ReqSearchFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_GetUserTrashBin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetUserTrashBin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).GetUserTrashBin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/GetUserTrashBin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).GetUserTrashBin(ctx, req.(*ReqGetUserTrashBin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_CleanTrashFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCleanTrashFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).CleanTrashFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/CleanTrashFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).CleanTrashFile(ctx, req.(*ReqCleanTrashFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_CleanTrashDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCleanTrashDir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).CleanTrashDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/CleanTrashDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).CleanTrashDir(ctx, req.(*ReqCleanTrashDir))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_WithDrawFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWithDrawFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).WithDrawFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/WithDrawFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).WithDrawFile(ctx, req.(*ReqWithDrawFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_WithDrawDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqWithDrawDir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).WithDrawDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/WithDrawDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).WithDrawDir(ctx, req.(*ReqWithDrawDir))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_CreateDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateDir)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).CreateDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/CreateDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).CreateDir(ctx, req.(*ReqCreateDir))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_GuestUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGuestUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).GuestUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/GuestUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).GuestUpload(ctx, req.(*ReqGuestUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transfer_GetCodeDownload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetCodeDownLoad)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServer).GetCodeDownload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tf.service.v1.Transfer/GetCodeDownload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServer).GetCodeDownload(ctx, req.(*ReqGetCodeDownLoad))
	}
	return interceptor(ctx, in, info, handler)
}

// Transfer_ServiceDesc is the grpc.ServiceDesc for Transfer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transfer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tf.service.v1.Transfer",
	HandlerType: (*TransferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadEntry",
			Handler:    _Transfer_UploadEntry_Handler,
		},
		{
			MethodName: "DownLoadEntry",
			Handler:    _Transfer_DownLoadEntry_Handler,
		},
		{
			MethodName: "UploadStatic",
			Handler:    _Transfer_UploadStatic_Handler,
		},
		{
			MethodName: "GetUserFileTree",
			Handler:    _Transfer_GetUserFileTree_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Transfer_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteDir",
			Handler:    _Transfer_DeleteDir_Handler,
		},
		{
			MethodName: "ShareFileStr",
			Handler:    _Transfer_ShareFileStr_Handler,
		},
		{
			MethodName: "PreviewFile",
			Handler:    _Transfer_PreviewFile_Handler,
		},
		{
			MethodName: "FileCensus",
			Handler:    _Transfer_FileCensus_Handler,
		},
		{
			MethodName: "SearchFile",
			Handler:    _Transfer_SearchFile_Handler,
		},
		{
			MethodName: "GetUserTrashBin",
			Handler:    _Transfer_GetUserTrashBin_Handler,
		},
		{
			MethodName: "CleanTrashFile",
			Handler:    _Transfer_CleanTrashFile_Handler,
		},
		{
			MethodName: "CleanTrashDir",
			Handler:    _Transfer_CleanTrashDir_Handler,
		},
		{
			MethodName: "WithDrawFile",
			Handler:    _Transfer_WithDrawFile_Handler,
		},
		{
			MethodName: "WithDrawDir",
			Handler:    _Transfer_WithDrawDir_Handler,
		},
		{
			MethodName: "CreateDir",
			Handler:    _Transfer_CreateDir_Handler,
		},
		{
			MethodName: "GuestUpload",
			Handler:    _Transfer_GuestUpload_Handler,
		},
		{
			MethodName: "GetCodeDownload",
			Handler:    _Transfer_GetCodeDownload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transfer.proto",
}
