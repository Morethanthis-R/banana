// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.0

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type AccountCenterHTTPServer interface {
	ForgetPass(context.Context, *ForgetPassRequest) (*ForgetPassReply, error)
	GetAccountInfo(context.Context, *GetAccountInfoRequest) (*GetAccountInfoReply, error)
	GetGuest(context.Context, *GetGuestRequest) (*GetGuestReply, error)
	GetPorn(context.Context, *GetPornRequest) (*GetPornReply, error)
	ListAccount(context.Context, *ListAccountRequest) (*ListAccountReply, error)
	Login(context.Context, *CommonLoginRequest) (*CommonLoginReply, error)
	Logout(context.Context, *LogoutRequest) (*LogoutReply, error)
	PasswordReset(context.Context, *PasswordResetRequest) (*PasswordResetReply, error)
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	SendEmailCode(context.Context, *SendEmailCodeRequest) (*SendEmailCodeReply, error)
	SetAdmin(context.Context, *SetAdminRequest) (*SetAdminReply, error)
	UpdateAccountInfo(context.Context, *UpdateAccountInfoRequest) (*UpdateAccountInfoReply, error)
	WXLogin(context.Context, *WXLoginRequest) (*WXLoginReply, error)
}

func RegisterAccountCenterHTTPServer(s *http.Server, srv AccountCenterHTTPServer) {
	r := s.Route("/")
	r.POST("/account-center/set-admin", _AccountCenter_SetAdmin0_HTTP_Handler(srv))
	r.POST("/account-center/e-validate/", _AccountCenter_SendEmailCode0_HTTP_Handler(srv))
	r.POST("/account-center/common/login/", _AccountCenter_Login0_HTTP_Handler(srv))
	r.GET("/account-center/logout/", _AccountCenter_Logout0_HTTP_Handler(srv))
	r.POST("/account-center/common/register/", _AccountCenter_Register0_HTTP_Handler(srv))
	r.POST("/account-center/wx-login/", _AccountCenter_WXLogin0_HTTP_Handler(srv))
	r.GET("/account-center/account/info/{id}", _AccountCenter_GetAccountInfo0_HTTP_Handler(srv))
	r.POST("/account-center/reset/", _AccountCenter_PasswordReset0_HTTP_Handler(srv))
	r.GET("/account-center/list/", _AccountCenter_ListAccount0_HTTP_Handler(srv))
	r.POST("/account-center/update/", _AccountCenter_UpdateAccountInfo0_HTTP_Handler(srv))
	r.GET("/account-center/common/porn/", _AccountCenter_GetPorn0_HTTP_Handler(srv))
	r.GET("/account-center/common/guest", _AccountCenter_GetGuest0_HTTP_Handler(srv))
	r.GET("/account-center/forget", _AccountCenter_ForgetPass0_HTTP_Handler(srv))
}

func _AccountCenter_SetAdmin0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetAdminRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/SetAdmin")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetAdmin(ctx, req.(*SetAdminRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetAdminReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_SendEmailCode0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendEmailCodeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/SendEmailCode")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendEmailCode(ctx, req.(*SendEmailCodeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendEmailCodeReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_Login0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CommonLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/Login")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*CommonLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CommonLoginReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_Logout0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/Logout")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_Register0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RegisterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/Register")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Register(ctx, req.(*RegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RegisterReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_WXLogin0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WXLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/WXLogin")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WXLogin(ctx, req.(*WXLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WXLoginReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_GetAccountInfo0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAccountInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/GetAccountInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAccountInfo(ctx, req.(*GetAccountInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAccountInfoReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_PasswordReset0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PasswordResetRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/PasswordReset")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PasswordReset(ctx, req.(*PasswordResetRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PasswordResetReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_ListAccount0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAccountRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/ListAccount")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAccount(ctx, req.(*ListAccountRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAccountReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_UpdateAccountInfo0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAccountInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/UpdateAccountInfo")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAccountInfo(ctx, req.(*UpdateAccountInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAccountInfoReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_GetPorn0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetPornRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/GetPorn")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetPorn(ctx, req.(*GetPornRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetPornReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_GetGuest0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGuestRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/GetGuest")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGuest(ctx, req.(*GetGuestRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGuestReply)
		return ctx.Result(200, reply)
	}
}

func _AccountCenter_ForgetPass0_HTTP_Handler(srv AccountCenterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ForgetPassRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/ac.service.v1.AccountCenter/ForgetPass")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ForgetPass(ctx, req.(*ForgetPassRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ForgetPassReply)
		return ctx.Result(200, reply)
	}
}

type AccountCenterHTTPClient interface {
	ForgetPass(ctx context.Context, req *ForgetPassRequest, opts ...http.CallOption) (rsp *ForgetPassReply, err error)
	GetAccountInfo(ctx context.Context, req *GetAccountInfoRequest, opts ...http.CallOption) (rsp *GetAccountInfoReply, err error)
	GetGuest(ctx context.Context, req *GetGuestRequest, opts ...http.CallOption) (rsp *GetGuestReply, err error)
	GetPorn(ctx context.Context, req *GetPornRequest, opts ...http.CallOption) (rsp *GetPornReply, err error)
	ListAccount(ctx context.Context, req *ListAccountRequest, opts ...http.CallOption) (rsp *ListAccountReply, err error)
	Login(ctx context.Context, req *CommonLoginRequest, opts ...http.CallOption) (rsp *CommonLoginReply, err error)
	Logout(ctx context.Context, req *LogoutRequest, opts ...http.CallOption) (rsp *LogoutReply, err error)
	PasswordReset(ctx context.Context, req *PasswordResetRequest, opts ...http.CallOption) (rsp *PasswordResetReply, err error)
	Register(ctx context.Context, req *RegisterRequest, opts ...http.CallOption) (rsp *RegisterReply, err error)
	SendEmailCode(ctx context.Context, req *SendEmailCodeRequest, opts ...http.CallOption) (rsp *SendEmailCodeReply, err error)
	SetAdmin(ctx context.Context, req *SetAdminRequest, opts ...http.CallOption) (rsp *SetAdminReply, err error)
	UpdateAccountInfo(ctx context.Context, req *UpdateAccountInfoRequest, opts ...http.CallOption) (rsp *UpdateAccountInfoReply, err error)
	WXLogin(ctx context.Context, req *WXLoginRequest, opts ...http.CallOption) (rsp *WXLoginReply, err error)
}

type AccountCenterHTTPClientImpl struct {
	cc *http.Client
}

func NewAccountCenterHTTPClient(client *http.Client) AccountCenterHTTPClient {
	return &AccountCenterHTTPClientImpl{client}
}

func (c *AccountCenterHTTPClientImpl) ForgetPass(ctx context.Context, in *ForgetPassRequest, opts ...http.CallOption) (*ForgetPassReply, error) {
	var out ForgetPassReply
	pattern := "/account-center/forget"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/ForgetPass"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) GetAccountInfo(ctx context.Context, in *GetAccountInfoRequest, opts ...http.CallOption) (*GetAccountInfoReply, error) {
	var out GetAccountInfoReply
	pattern := "/account-center/account/info/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/GetAccountInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) GetGuest(ctx context.Context, in *GetGuestRequest, opts ...http.CallOption) (*GetGuestReply, error) {
	var out GetGuestReply
	pattern := "/account-center/common/guest"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/GetGuest"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) GetPorn(ctx context.Context, in *GetPornRequest, opts ...http.CallOption) (*GetPornReply, error) {
	var out GetPornReply
	pattern := "/account-center/common/porn/"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/GetPorn"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) ListAccount(ctx context.Context, in *ListAccountRequest, opts ...http.CallOption) (*ListAccountReply, error) {
	var out ListAccountReply
	pattern := "/account-center/list/"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/ListAccount"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) Login(ctx context.Context, in *CommonLoginRequest, opts ...http.CallOption) (*CommonLoginReply, error) {
	var out CommonLoginReply
	pattern := "/account-center/common/login/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/Login"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) Logout(ctx context.Context, in *LogoutRequest, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/account-center/logout/"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/Logout"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) PasswordReset(ctx context.Context, in *PasswordResetRequest, opts ...http.CallOption) (*PasswordResetReply, error) {
	var out PasswordResetReply
	pattern := "/account-center/reset/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/PasswordReset"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) Register(ctx context.Context, in *RegisterRequest, opts ...http.CallOption) (*RegisterReply, error) {
	var out RegisterReply
	pattern := "/account-center/common/register/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/Register"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) SendEmailCode(ctx context.Context, in *SendEmailCodeRequest, opts ...http.CallOption) (*SendEmailCodeReply, error) {
	var out SendEmailCodeReply
	pattern := "/account-center/e-validate/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/SendEmailCode"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) SetAdmin(ctx context.Context, in *SetAdminRequest, opts ...http.CallOption) (*SetAdminReply, error) {
	var out SetAdminReply
	pattern := "/account-center/set-admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/SetAdmin"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) UpdateAccountInfo(ctx context.Context, in *UpdateAccountInfoRequest, opts ...http.CallOption) (*UpdateAccountInfoReply, error) {
	var out UpdateAccountInfoReply
	pattern := "/account-center/update/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/UpdateAccountInfo"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AccountCenterHTTPClientImpl) WXLogin(ctx context.Context, in *WXLoginRequest, opts ...http.CallOption) (*WXLoginReply, error) {
	var out WXLoginReply
	pattern := "/account-center/wx-login/"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/ac.service.v1.AccountCenter/WXLogin"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
